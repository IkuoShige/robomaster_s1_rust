//! CRC8 implementation for RoboMaster protocol
//!
//! This implementation is compatible with the Python version in the original codebase.

/// CRC8 initial value
pub const CRC8_INIT: u8 = 119;

/// CRC8 polynomial table for fast calculation (matches Python implementation)
const CRC8_TABLE: [u8; 256] = [
    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
];

/// Calculate CRC8 checksum for the given data
///
/// # Arguments
/// * `data` - Byte slice to calculate CRC for
///
/// # Returns
/// * CRC8 checksum value
///
/// # Examples
/// ```rust
/// use robomaster_rust::crc::calculate_crc8;
/// 
/// let data = vec![0x55, 0x1b, 0x04];
/// let crc = calculate_crc8(&data);
/// println!("CRC8: 0x{:02x}", crc);
/// ```
pub fn calculate_crc8(data: &[u8]) -> u8 {
    let mut crc: u8 = CRC8_INIT;
    
    for &byte in data {
        let index = crc ^ byte;
        crc = CRC8_TABLE[index as usize];
    }
    
    crc
}

/// Append CRC8 checksum to the given data vector
///
/// # Arguments
/// * `data` - Mutable reference to data vector
///
/// # Examples
/// ```rust
/// use robomaster_rust::crc::append_crc8_checksum;
/// 
/// let mut data = vec![0x55, 0x1b, 0x04];
/// append_crc8_checksum(&mut data);
/// // data now contains: [0x55, 0x1b, 0x04, 0xa2]
/// ```
pub fn append_crc8_checksum(data: &mut Vec<u8>) {
    let crc = calculate_crc8(data);
    data.push(crc);
}

/// Verify CRC8 checksum of the given data
///
/// # Arguments
/// * `data` - Data including CRC8 at the end
///
/// # Returns
/// * `true` if CRC is valid, `false` otherwise
///
/// # Examples
/// ```rust
/// use robomaster_rust::crc::verify_crc8_checksum;
/// 
/// let data = vec![0x55, 0x1b, 0x04, 0xa2];
/// assert!(verify_crc8_checksum(&data));
/// ```
pub fn verify_crc8_checksum(data: &[u8]) -> bool {
    if data.is_empty() {
        return false;
    }
    
    let (payload, expected_crc) = data.split_at(data.len() - 1);
    let calculated_crc = calculate_crc8(payload);
    
    calculated_crc == expected_crc[0]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_crc8_calculation() {
        // Test cases from the original Python implementation
        let test_cases = vec![
            (vec![0x55, 0x1b, 0x04], 0x75),   // Python result: 117 (0x75)
            (vec![0x55, 0x0f, 0x04], 0xa2),   // Python result: 162 (0xa2)
            (vec![0x40, 0x04, 0x4c], 0x7a),   // Python result: 122 (0x7a)
        ];

        for (data, expected) in test_cases {
            let result = calculate_crc8(&data);
            assert_eq!(result, expected, "CRC8 mismatch for data: {:?}", data);
        }
    }

    #[test]
    fn test_crc8_append() {
        let mut data = vec![0x55, 0x0f, 0x04];
        append_crc8_checksum(&mut data);
        
        assert_eq!(data.len(), 4);
        assert_eq!(data[3], 0xa2);
    }

    #[test]
    fn test_crc8_verify() {
        let valid_data = vec![0x55, 0x0f, 0x04, 0xa2];
        assert!(verify_crc8_checksum(&valid_data));
        
        let invalid_data = vec![0x55, 0x0f, 0x04, 0xa3];
        assert!(!verify_crc8_checksum(&invalid_data));
    }

    #[test]
    fn test_crc8_empty_data() {
        let empty_data = vec![];
        assert!(!verify_crc8_checksum(&empty_data));
        
        let calculated = calculate_crc8(&empty_data);
        assert_eq!(calculated, 119);  // Python returns CRC8_INIT for empty data
    }
}
